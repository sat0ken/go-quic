package main

import (
	"bytes"
	"fmt"
	"quic"
)

// InitalPacketの暗号化
func samplePacketProtect() {

	// The resulting protected packet is
	resultProtectedPacket := quic.StrtoByte("c000000001088394c8f03e5157080000449e7b9aec34d1b1c98dd7689fb8ec11d242b123dc9bd8bab936b47d92ec356c0bab7df5976d27cd449f63300099f3991c260ec4c60d17b31f8429157bb35a1282a643a8d2262cad67500cadb8e7378c8eb7539ec4d4905fed1bee1fc8aafba17c750e2c7ace01e6005f80fcb7df621230c83711b39343fa028cea7f7fb5ff89eac2308249a02252155e2347b63d58c5457afd84d05dfffdb20392844ae812154682e9cf012f9021a6f0be17ddd0c2084dce25ff9b06cde535d0f920a2db1bf362c23e596d11a4f5a6cf3948838a3aec4e15daf8500a6ef69ec4e3feb6b1d98e610ac8b7ec3faf6ad760b7bad1db4ba3485e8a94dc250ae3fdb41ed15fb6a8e5eba0fc3dd60bc8e30c5c4287e53805db059ae0648db2f64264ed5e39be2e20d82df566da8dd5998ccabdae053060ae6c7b4378e846d29f37ed7b4ea9ec5d82e7961b7f25a9323851f681d582363aa5f89937f5a67258bf63ad6f1a0b1d96dbd4faddfcefc5266ba6611722395c906556be52afe3f565636ad1b17d508b73d8743eeb524be22b3dcbc2c7468d54119c7468449a13d8e3b95811a198f3491de3e7fe942b330407abf82a4ed7c1b311663ac69890f4157015853d91e923037c227a33cdd5ec281ca3f79c44546b9d90ca00f064c99e3dd97911d39fe9c5d0b23a229a234cb36186c4819e8b9c5927726632291d6a418211cc2962e20fe47feb3edf330f2c603a9d48c0fcb5699dbfe5896425c5bac4aee82e57a85aaf4e2513e4f05796b07ba2ee47d80506f8d2c25e50fd14de71e6c418559302f939b0e1abd576f279c4b2e0feb85c1f28ff18f58891ffef132eef2fa09346aee33c28eb130ff28f5b766953334113211996d20011a198e3fc433f9f2541010ae17c1bf202580f6047472fb36857fe843b19f5984009ddc324044e847a4f4a0ab34f719595de37252d6235365e9b84392b061085349d73203a4a13e96f5432ec0fd4a1ee65accdd5e3904df54c1da510b0ff20dcc0c77fcb2c0e0eb605cb0504db87632cf3d8b4dae6e705769d1de354270123cb11450efc60ac47683d7b8d0f811365565fd98c4c8eb936bcab8d069fc33bd801b03adea2e1fbc5aa463d08ca19896d2bf59a071b851e6c239052172f296bfb5e72404790a2181014f3b94a4e97d117b438130368cc39dbb2d198065ae3986547926cd2162f40a29f0c3c8745c0f50fba3852e566d44575c29d39a03f0cda721984b6f440591f355e12d439ff150aab7613499dbd49adabc8676eef023b15b65bfc5ca06948109f23f350db82123535eb8a7433bdabcb909271a6ecbcb58b936a88cd4e8f2e6ff5800175f113253d8fa9ca8885c2f552e657dc603f252e1a8e308f76f0be79e2fb8f5d5fbbe2e30ecadd220723c8c0aea8078cdfcb3868263ff8f0940054da48781893a7e49ad5aff4af300cd804a6b6279ab3ff3afb64491c85194aab760d58a606654f9f4400e8b38591356fbf6425aca26dc85244259ff2b19c41b9f96f3ca9ec1dde434da7d2d392b905ddf3d1f9af93d1af5950bd493f5aa731b4056df31bd267b6b90a079831aaf579be0a39013137aac6d404f518cfd46840647e78bfe706ca4cf5e9c5453e9f7cfd2b8b4c8d169a44e55c88d4a9a7f9474241e221af44860018ab0856972e194cd934satoken@")

	// sampleのDestination接続ID
	destconnID := quic.StrtoByte("8394C8F03E515708")
	//sourceconnID := []byte{
	//	0x74, 0xcf, 0xe6, 0x47, 0x10, 0x1c, 0xc7, 0x8f,
	//}
	keyblock := quic.CreateQuicInitialSecret(destconnID)
	// A.2. クライアントの初期 Crypto Frame
	// RFC9001のsample
	plaintext := quic.StrtoByte("060040f1010000ed0303ebf8fa56f12939b9584a3896472ec40bb863cfd3e86804fe3a47f06a2b69484c00000413011302010000c000000010000e00000b6578616d706c652e636f6dff01000100000a00080006001d0017001800100007000504616c706e000500050100000000003300260024001d00209370b2c9caa47fbabaf4559fedba753de171fa71f50f1ce15d43e994ec74d748002b0003020304000d0010000e0403050306030203080408050806002d00020101001c00024001003900320408ffffffffffffffff05048000ffff07048000ffff0801100104800075300901100f088394c8f03e51570806048000ffff")

	header, initPacket := quic.NewQuicLongHeader(destconnID, nil, 2, 4)

	// Clientが送信するInitial Packetを含むUDPペイロードは1200バイト以上にしないといけない
	// PADDINGフレームの長さを計算する
	//paddingLength := 1200 - 5 - len(initPacket.PacketNumber) -
	//	len(header.SourceConnID) - len(initPacket.Token) -
	//	16 - 2 - len(plaintext) - 16
	//paddingLength := 1252 - len(quic.ToPacket(header)) -
	//	len(initPacket.PacketNumber) - len(plaintext) - 16 - 4
	paddingLength := 1200 - len(quic.ToPacket(header)) -
		len(initPacket.PacketNumber) - len(plaintext) - 16 - 4

	// ゼロ埋めしてPayloadをセット
	initPacket.Payload = quic.AddPaddingFrame(plaintext, paddingLength)
	//fmt.Printf("paddingLength is %d, %d\n", paddingLength, len(initPacket.Payload))
	fmt.Printf("After padding payload is %d\n", len(initPacket.Payload))

	// PayloadのLength + Packet番号のLength + AEADの認証タグ長=16
	length := len(initPacket.Payload) + len(initPacket.PacketNumber) + 16
	// 可変長整数のエンコードをしてLengthをセット
	initPacket.Length = quic.EncodeVariableInt(length)

	headerByte := quic.ToPacket(header)
	// set Token Length
	headerByte = append(headerByte, 0x00)
	headerByte = append(headerByte, initPacket.Length...)
	headerByte = append(headerByte, initPacket.PacketNumber...)

	fmt.Printf("header is %x\n", headerByte)
	//fmt.Printf("Payload is %x\n", initPacket.Payload)
	//add := tcpip.StrtoByte("c300000001088394c8f03e5157080000449e00000002")
	enctext := quic.EncryptQuicPayload(initPacket.PacketNumber, headerByte, initPacket.Payload, keyblock)
	fmt.Printf("enctext is %x\n", enctext[0:16])
	////
	protectHeader := quic.QuicHeaderToProtect(headerByte, enctext[0:16], keyblock.ClientHeaderProtection)
	fmt.Printf("protected header is %x\n", protectHeader)
	// ヘッダとデータで送信するパケットを生成
	packet := protectHeader
	packet = append(packet, enctext...)

	if bytes.Equal(packet, resultProtectedPacket) {
		fmt.Println("result is true")
	}
	quic.SendQuicPacket(packet, []byte{127, 0, 0, 1}, 18443)
}

func main() {
	//samplePacketProtect()
	decryptSamplePacket()
}

func decryptSamplePacket() {
	// The resulting protected packet is
	//resultProtectedPacket := quic.StrtoByte("c000000001088394c8f03e5157080000449e7b9aec34d1b1c98dd7689fb8ec11d242b123dc9bd8bab936b47d92ec356c0bab7df5976d27cd449f63300099f3991c260ec4c60d17b31f8429157bb35a1282a643a8d2262cad67500cadb8e7378c8eb7539ec4d4905fed1bee1fc8aafba17c750e2c7ace01e6005f80fcb7df621230c83711b39343fa028cea7f7fb5ff89eac2308249a02252155e2347b63d58c5457afd84d05dfffdb20392844ae812154682e9cf012f9021a6f0be17ddd0c2084dce25ff9b06cde535d0f920a2db1bf362c23e596d11a4f5a6cf3948838a3aec4e15daf8500a6ef69ec4e3feb6b1d98e610ac8b7ec3faf6ad760b7bad1db4ba3485e8a94dc250ae3fdb41ed15fb6a8e5eba0fc3dd60bc8e30c5c4287e53805db059ae0648db2f64264ed5e39be2e20d82df566da8dd5998ccabdae053060ae6c7b4378e846d29f37ed7b4ea9ec5d82e7961b7f25a9323851f681d582363aa5f89937f5a67258bf63ad6f1a0b1d96dbd4faddfcefc5266ba6611722395c906556be52afe3f565636ad1b17d508b73d8743eeb524be22b3dcbc2c7468d54119c7468449a13d8e3b95811a198f3491de3e7fe942b330407abf82a4ed7c1b311663ac69890f4157015853d91e923037c227a33cdd5ec281ca3f79c44546b9d90ca00f064c99e3dd97911d39fe9c5d0b23a229a234cb36186c4819e8b9c5927726632291d6a418211cc2962e20fe47feb3edf330f2c603a9d48c0fcb5699dbfe5896425c5bac4aee82e57a85aaf4e2513e4f05796b07ba2ee47d80506f8d2c25e50fd14de71e6c418559302f939b0e1abd576f279c4b2e0feb85c1f28ff18f58891ffef132eef2fa09346aee33c28eb130ff28f5b766953334113211996d20011a198e3fc433f9f2541010ae17c1bf202580f6047472fb36857fe843b19f5984009ddc324044e847a4f4a0ab34f719595de37252d6235365e9b84392b061085349d73203a4a13e96f5432ec0fd4a1ee65accdd5e3904df54c1da510b0ff20dcc0c77fcb2c0e0eb605cb0504db87632cf3d8b4dae6e705769d1de354270123cb11450efc60ac47683d7b8d0f811365565fd98c4c8eb936bcab8d069fc33bd801b03adea2e1fbc5aa463d08ca19896d2bf59a071b851e6c239052172f296bfb5e72404790a2181014f3b94a4e97d117b438130368cc39dbb2d198065ae3986547926cd2162f40a29f0c3c8745c0f50fba3852e566d44575c29d39a03f0cda721984b6f440591f355e12d439ff150aab7613499dbd49adabc8676eef023b15b65bfc5ca06948109f23f350db82123535eb8a7433bdabcb909271a6ecbcb58b936a88cd4e8f2e6ff5800175f113253d8fa9ca8885c2f552e657dc603f252e1a8e308f76f0be79e2fb8f5d5fbbe2e30ecadd220723c8c0aea8078cdfcb3868263ff8f0940054da48781893a7e49ad5aff4af300cd804a6b6279ab3ff3afb64491c85194aab760d58a606654f9f4400e8b38591356fbf6425aca26dc85244259ff2b19c41b9f96f3ca9ec1dde434da7d2d392b905ddf3d1f9af93d1af5950bd493f5aa731b4056df31bd267b6b90a079831aaf579be0a39013137aac6d404f518cfd46840647e78bfe706ca4cf5e9c5453e9f7cfd2b8b4c8d169a44e55c88d4a9a7f9474241e221af44860018ab0856972e194cd934")
	resultProtectedPacket := quic.StrtoByte("cc0000000110b03b5b77b69a08c92070a495c00e00f9000044ca540ef4ec063929f86331779ea1aaa0a769921a14be2468407b72181f123683c7c6dce9f9ee34f80ff74c919572d37c241b298a4c996477680e35a925dfe0c0073eb02bfb331d075548f82730e709b64d7c6be88f6c28a461040f569cda602447d0f4fd9f3f0cdb2c29d508235cd6a4af5c821df3f9e6d611ace9017efa786ef86354005fb725a340cb9b942cf6b699ebc91b3db2eca2736efd27e80197c11e3165485cf6ed70a3fbcaf22ed136342d2b2bef46fced6b217157a281bc37fa6d6878ce31397fee9053bba923796d0c21e3e5923f0b4f6553b390fd90887ffde53eff5856a5cccfbead5549da9d66cf5f6ee4c7ba78ff8ee46a411aacf840244f61c46870ab007e8ffbcf58dee74ce47952214717976079e7c1553094f1b629c8b35a31cd2906659062ced152466be8cd20e2415031d9f430ba368137f0b983d47da50597810145711c8efca5823d1179c70b945a849a9399b36d27a781058261290dfb208352f15a3b4e64f839afad1b713af042d65aabf657bf0177ae8a2ddb58c86d9519195680ef65313fed1c9dbc4bd58eb95037e9bfcb551b123dfeada6fc881f5699126d6868b37e4732765936fb2e7fb6e8e39a0dc5d258b0365e1b78a285118a6c4d9eb9d2bf463ef78da8660004c72660edc5414e71fb3700d6463285176c8d07a1781d6db677cfb4dd4d3e494f0a4bf4d64f06a2a9fe9e7a7f3245053827ba0d05e2dbe3cd77b3b9fe4eb8ba82a7b1da567b6e1a3a13743b26cf6d1b2fa42cea260835d7ca6904be8044fc30dd878fbe2c941ad50610029bd816e60fc75bee92c4969d8b5c592915ecc3f861913c14a61bfd048cd5ede80d520ea73a5acfdcff4f0da7766f22d8ad84d6124badaf92fd131a3d5c507b02f6d6b342860b70eb81e06e9f3b47fb55e3e4373f6f574348967f20bb59ff701eec3af64be87e7023e42d70135c0af1f025b08f3b71ff01dec8e32a6dcef7c96a7f9a85b5240072848279dbd044393f1c9dbb7281efa96a506a78fbf6cca6c9f2435ad3173434ac152b70653a7d5f2e55a7b53afdc7c9ac5db56ffd9467f66d2bca1e988f3f1ebf04685444b623713ab5a1c1c936858d796010398e7219625e1c69f8a5f73884e66775209eb9d78a626e98bfad41e0092c13c1c800503b755f82af142a6d550d2c4e61b05d9b5687e7fe83cbe80c832f86b35cd85d762efe201b0598a497a002323bcaaff63f337df16f45a89d975dbea9802cad8732b0903ff093b47bbbcd17bc94fd97342f38d4a24c3cd5e5a4c86d05d7e3579f04df750cda5a7fd08c9a59b5c49d4267e223211846741c9c3c7f87f7537a262a20c2f3e6f66448d63a46595a53c12905f6458697fbf700654cefc3828c04189f78dfcf3e1ad6becb874297729c3a06fa40cce8bd305343123adbd7c1380aca458369ed2a12bac578b750e8c07a20dab70b91b3a4e32d2b54569a656d6d669ded70dec42cbb4733096bb31396216dcc08159a99d66789533284f2c4ba9a77ebcd4d1e08eecf05d330f9dc77a43958bb895398731a018bf6d7ceb9e435894340fdb0f699513c91ab834bd79b3a38d7410fddb8c3401726ec10fbc899c10d3290d8aa6a02029dfd9e1e212501230d55895dc53b15ff0e830a1340b8a261606f4cb83050a64d1ee49c63a36ac9499445ce2572d0609de84c16c836c6ae63d2928f0e85c35dc62656a7ae95445f29ad9bc1358f19310a")
	// パケットをパースする
	rawpacket := quic.ParseRawQuicPacket(resultProtectedPacket, true)

	rawheader := rawpacket.QuicHeader.(quic.QuicLongHeader)
	rawinitPacket := rawpacket.QuicFrames[0].(quic.InitialPacket)
	// destination connection id からキーを生成する
	keyblock := quic.CreateQuicInitialSecret(rawheader.DestConnID)

	// ヘッダ保護を解除してパースされたパケット
	unprotect := quic.QuicPacketToUnprotect(rawheader, rawinitPacket, resultProtectedPacket, keyblock.ClientHeaderProtection)
	header := unprotect.QuicHeader.(quic.QuicLongHeader)
	initpacket := unprotect.QuicFrames[0].(quic.InitialPacket)

	headerByte := quic.ToPacket(header)
	//fmt.Printf("header is %x\n", headerByte)
	headerByte = append(headerByte, initpacket.TokenLength...)
	headerByte = append(headerByte, initpacket.Length...)
	headerByte = append(headerByte, initpacket.PacketNumber...)

	plain := quic.DecryptQuicPayload(initpacket.PacketNumber, headerByte, initpacket.Payload, keyblock)
	fmt.Printf("header is %x\n", headerByte)
	fmt.Printf("plain is %x\n", quic.SkipPaddingFrame(plain))
	//fmt.Printf("payload is %x\n", initpacket.Payload)
	//fmt.Printf("%x%x%x\n", initpacket.Token, initpacket.Length, initpacket.PacketNumber)

}
